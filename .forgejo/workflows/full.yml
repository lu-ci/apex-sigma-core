name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  test:
    runs-on: docker
    container:
      image: node:22  # Use a Node.js image with Python support if necessary
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install Python and dependencies
        run: |
          apt-get update && apt-get install -y python3 python3-pip
          pip3 install -r requirements-test.txt --break-system-packages

      - name: Run tests
        run: python3 -m flake8 --ignore=E501 sigma/

  build-and-push:
    runs-on: docker
    container:
      image: ruby:3.0  # Ruby base image
    steps:
      - name: Install Docker CLI
        run: apt-get update && apt-get install -y docker.io

      - name: Configure Docker CLI to use TCP
        env:
          DOCKER_HOST: tcp://docker_in_docker_0:2375
        run: echo "Docker configured to use TCP at $DOCKER_HOST"

      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install childprocess gem
        run: gem install childprocess

      - name: Build Docker image
        env:
          DOCKER_HOST: tcp://docker_in_docker_0:2375
        run: ruby dockertool.rb build

      - name: Log in to Docker registry
        env:
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          REGISTRY_TOKEN: ${{ secrets.REGISTRY_TOKEN }}
          DOCKER_HOST: tcp://docker_in_docker_0:2375
        run: echo "${REGISTRY_TOKEN}" | docker login git.luciascipher.com -u "${REGISTRY_USER}" --password-stdin

      - name: Push Docker image
        env:
          DOCKER_HOST: tcp://docker_in_docker_0:2375
        run: ruby dockertool.rb push

  deploy:
    runs-on: docker
    container:
      image: alpine:latest
    steps:
      - name: Install SSH client
        run: apk add --no-cache openssh

      - name: SSH and Deploy
        env:
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "${SSH_KEY}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -o StrictHostKeyChecking=no "${SSH_USER}@${SSH_HOST}" <<EOF
          cd /srv
          docker-compose pull sigma_0
          docker-compose up -d
          EOF